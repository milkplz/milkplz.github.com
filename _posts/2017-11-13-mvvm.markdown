---
layout: post
title:  "MVVM"
date:   2017-11-12 06:57:48 +0900
categories: jekyll update
---
# MVVM 프로젝트에 적용하기 
### FE개발을 하면서 가장 눈에 가시같은 부분을 꼽으라면 한다면, View의 상태를 관리하는 로직일 것이다.
예를 들면, View의 width,height 설정. 좌표(x,y)설정 등이 있을 것이다. 실제로 개발을 하다보면, 이런 코드들은 우리가 생각하는 것보다 굉장히 많은 지면을 차지한다.
이 코드들은 실제로 우리가 관리해야할 비지니스 코드들을 찾기 어렵게 만든다. 

유지, 관리면에서 비용이 발생하는 것이다.

따라서, 우리는 해당 코드들을 따로 때어서 관리하고 싶어한다.

이는 MVC에서 모델과 뷰의 분리와 다른 개념이다. View와 View의 status및 형태를 관리하는 로직의 분리인 것이다.

### 사내 프로젝트에서 서비스 UI Demo를 언어별로 개발하는 프로젝트를 맡고 있다.
작년 말에 진행했던 이 프로젝트는 지금은 구API가 되버린 API를 이용하여 언어(JS, iOS, Android)별로 3개의 Demo를 만들었으며, 현재 신규 API와 신규 UI가이드를 토대로 새롭게 개발하고 있다.

구 API로 개발했던 작업물의 아키텍쳐는 굉장히 심플하게 구성했으며, MainController에서 모든 이벤트를 아래의 형태로 처리하였다.
1. event 발생
2. DataModel update 또는 Network 처리
3. View update

작년말까지만해도 단순한 이 구조가 괜찮게 생각되었으나, 신규로 다시 같은 작업을 진행하면서 새로운 문제점을 인식하게 되었다.
1. Class별 기능 정의가 명확하지가 않음.
2. MainController에 모든 처리가 집중되어 있어 중요 UI로직의 모듈화가 불가능함.
3. MainController에 뒤섞여 있는 View관리 로직과 비지니스 로직의 분리 필요.
3. SubController는 View 처리 로직으로 가득차 있는 상태

이런 문제점들을 해결하기 위해, MainController의 기능을 제한하고, SubController들에게 각각 재기능을 하게 만들기로 결정하였다.
그리고 새로운 패턴인 MVVM을 적용하였다.


